!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var r,o,a=function(e,t){return{name:e,symbol:t}},i=(r=Array(9).fill(null),{returnBoard:function(){return r},getCell:o=function(e){return r[e]},setCell:function(e,t){return null===r[e]&&(r[e]=t,!0)},winningPositions:function(){return[[o(0),o(4),o(8)],[o(2),o(4),o(6)]].concat([[o(0),o(3),o(6)],[o(1),o(4),o(7)],[o(2),o(5),o(8)]]).concat([[o(0),o(1),o(2)],[o(3),o(4),o(5)],[o(6),o(7),o(8)]])},reset:function(){r=Array(9).fill(null)}});function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var c,d,s,f,m=(f=function(e,t){return e.every((function(e){return e===t&&null!==e}))},{setPlayers:function(e){var t=l(e,2);c=t[0],d=t[1]},getPlayers:function(){return[c,d]},setBoard:function(e){s=e},switchPlayers:function(){var e=c;c=d,d=e},getCurrentPlayer:function(){return c},getBoard:function(){return s},gameOver:function(){return function(){for(var e=s.winningPositions(),t=0;t<e.length;t+=1)if(f(e[t],e[t][0]))return!0;return!1}()?"W":!s.returnBoard().some((function(e){return null===e}))&&"D"}});function y(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||v(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw a}}return n}(e,t)||v(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var b=document.querySelector(".container"),g=function(e){var t=p(e,2),n=t[0],r=t[1],o=a(n,"X"),i=a(r,"O");m.setPlayers([o,i])},S=function(e,t){t.forEach((function(t){e.removeChild(t)}))},C=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=document.querySelectorAll(".cell");!1===t&&g(e),m.setBoard(i),x(n)},E=function(){var e=document.querySelector(".container"),t=document.querySelector("#grid");t.classList.add("h-600");for(var n=0;n<=8;n+=1){var r=document.createElement("div");r.id=n,r.className="cell col s4",t.appendChild(r)}e.classList.add("pt-4"),e.appendChild(t)},L=function(e){var t=document.createElement("div");t.id="player_turn",e.appendChild(t)},w=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=document.querySelector("#grid");L(t);var n=document.querySelectorAll(".cell");t.classList.remove("teal","card-panel","z-depth-2","player-wrapper","flex-col"),e&&S(t,e),[0,3].forEach((function(e){return n[e].classList.add("first")})),[2,5].forEach((function(e){return n[e].classList.add("last")})),n[6].classList.add("first"),n[8].classList.add("last")},P=function(e){!function(e){e.addEventListener("submit",(function(t){t.preventDefault();var n=y(e.elements).slice(0,2).map((function(e){return e.value}));E();var r=document.querySelector("form"),o=document.querySelector("#title");w([r,o]),C(n)}))}(function(e){var t=document.querySelector("#grid"),n=document.querySelector("#title"),r=document.createElement("form"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("div"),l=document.createElement("input");return e.addEventListener("click",(function(){t.classList.add("player-wrapper"),t.removeChild(e),r.className="col s12",n.textContent="Enter your names:",o.className="row",a.className="input-field col s12",i.className="input-field col s12",l.type="submit",l.className="btn teal",l.id="submit",l.value="PLAY",a.innerHTML='<input id="x_name" placeholder="Name of Player X" value="Player X" type="text" class="validate">',i.innerHTML='<input id="o_name" placeholder="Name of Player O" value="Player O" type="text" class="validate">',o.appendChild(a),o.appendChild(i),o.appendChild(l),r.appendChild(o),t.appendChild(r)})),r}(e))},q=function(e){!function(e){var t=document.createElement("div"),n=document.createElement("h2"),r=document.createElement("button");t.classList.add("row"),t.id="grid",t.classList.add("card-panel"),t.classList.add("teal","lighten-4","z-depth-2","h-600","flex-col"),n.innerHTML="Welcome,<br><br>Click below to start",n.id="title",n.className="white-txt",r.className="btn",r.innerHTML="Start",r.id="start",t.appendChild(n),t.appendChild(r),e.appendChild(t),P(r)}(e)},A=function(){var e=document.querySelector("#grid"),t=function(e){var t=document.querySelector("h2"),n=document.createElement("h3");n.innerText="Would you like to play again?";var r=document.createElement("input"),o=document.createElement("input"),a=document.createElement("div");return a.className="btn-div",r.type="submit",r.id="yes",r.value="Yes",r.className="play-btn btn",o.type="submit",o.id="no",o.value="No",o.className="play-btn btn",e.appendChild(n),a.appendChild(r),a.appendChild(o),e.appendChild(a),[t,n,a]}(e),n=document.querySelector("#yes"),r=document.querySelector("#no");n.addEventListener("click",(function(){S(e,t),E(),w(),C([],!0)})),r.addEventListener("click",(function(){!function(){var e=document.querySelector(".container"),t=document.querySelector("#grid");S(e,[t]),q(e)}()}))},O=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=document.querySelector("#grid");t.removeChild(document.querySelector("#player_turn")),t.classList.add("teal","z-depth-2","h-600","flex-col");var n=document.createElement("h2");n.innerHTML=e?"The winner is ".concat(e):"It's a draw!",n.classList.add("white-txt"),t.appendChild(n)},j=function(e,t){e.innerHTML="<h4>It is ".concat(t,"'s turn.</h4>")},x=function(e){var t=document.querySelector("#player_turn");j(t,m.getCurrentPlayer().name),e.forEach((function(e){return e.addEventListener("click",(function(){if(m.getBoard().setCell(this.id,m.getCurrentPlayer().symbol)){this.innerHTML="O"===(n=m.getCurrentPlayer().symbol)?'<i class="material-icons symbol">radio_button_unchecked</i>':"X"===n?'<i class="material-icons symbol">clear</i>':void 0;var e=m.gameOver();e&&(!function(){var e=document.querySelector("#grid");document.querySelectorAll(".cell").forEach((function(t){return e.removeChild(t)}))}(),"W"===e?O(m.getCurrentPlayer().name):O(),m.getBoard().reset(),A()),e||(m.switchPlayers(),j(t,m.getCurrentPlayer().name))}var n}))}))};q(b)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,